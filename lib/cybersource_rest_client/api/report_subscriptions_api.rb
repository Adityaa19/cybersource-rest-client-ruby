=begin
#CyberSource Flex API

#Simple PAN tokenization service

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'uri'

module CyberSource
  class ReportSubscriptionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default, config)
      @api_client = api_client
      @api_client.set_configuration(config)
    end
    # Create Report Subscription for a report name by organization
    # 
    # @param report_name Name of the Report to Create
    # @param request_body Report subscription request payload
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_subscription(request_body, opts = {})
      data, _status_code, _headers = create_subscription_with_http_info(request_body, opts)
      return data, _status_code, _headers
    end

    # Create Report Subscription for a report name by organization
    # 
    # @param report_name Name of the Report to Create
    # @param request_body Report subscription request payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_subscription_with_http_info(request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportSubscriptionsApi.create_subscription ...'
      end
      # verify the required parameter 'report_name' is set
      # if @api_client.config.client_side_validation && report_name.nil?
      #   fail ArgumentError, "Missing the required parameter 'report_name' when calling ReportSubscriptionsApi.create_subscription"
      # end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling ReportSubscriptionsApi.create_subscription"
      end
      # resource path
      local_var_path = 'reporting/v3/report-subscriptions'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request_body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportSubscriptionsApi#create_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete subscription of a report name by organization
    # 
    # @param report_name Name of the Report to Delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_subscription(report_name, opts = {})
      data, _status_code, _headers = delete_subscription_with_http_info(report_name, opts)
      return data, _status_code, _headers
    end

    # Delete subscription of a report name by organization
    # 
    # @param report_name Name of the Report to Delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_subscription_with_http_info(report_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportSubscriptionsApi.delete_subscription ...'
      end
      # verify the required parameter 'report_name' is set
      if @api_client.config.client_side_validation && report_name.nil?
        fail ArgumentError, "Missing the required parameter 'report_name' when calling ReportSubscriptionsApi.delete_subscription"
      end
      if @api_client.config.client_side_validation && report_name.to_s.length > 80
        fail ArgumentError, 'invalid value for "report_name" when calling ReportSubscriptionsApi.delete_subscription, the character length must be smaller than or equal to 80.'
      end

      if @api_client.config.client_side_validation && report_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "report_name" when calling ReportSubscriptionsApi.delete_subscription, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && report_name !~ Regexp.new(/[a-zA-Z0-9-_+]+/)
        fail ArgumentError, "invalid value for 'report_name' when calling ReportSubscriptionsApi.delete_subscription, must conform to the pattern /[a-zA-Z0-9-_+]+/."
      end

      # resource path
      local_var_path = 'reporting/v3/report-subscriptions/{reportName}'.sub('{' + 'reportName' + '}', report_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportSubscriptionsApi#delete_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve all subscriptions by organization
    # 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2006]
    def get_all_subscriptions(opts = {})
      data, _status_code, _headers = get_all_subscriptions_with_http_info(opts)
      return data, _status_code, _headers
    end

    # Retrieve all subscriptions by organization
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2006, Fixnum, Hash)>] InlineResponse2006 data, response status code and response headers
    def get_all_subscriptions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportSubscriptionsApi.get_all_subscriptions ...'
      end
      # resource path
      local_var_path = 'reporting/v3/report-subscriptions'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2006')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportSubscriptionsApi#get_all_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve subscription for a report name by organization
    # 
    # @param report_name Name of the Report to Retrieve
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2006Subscriptions]
    def get_subscription(report_name, opts = {})
      data, _status_code, _headers = get_subscription_with_http_info(report_name, opts)
      return data, _status_code, _headers
    end

    # Retrieve subscription for a report name by organization
    # 
    # @param report_name Name of the Report to Retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2006Subscriptions, Fixnum, Hash)>] InlineResponse2006Subscriptions data, response status code and response headers
    def get_subscription_with_http_info(report_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportSubscriptionsApi.get_subscription ...'
      end
      # verify the required parameter 'report_name' is set
      if @api_client.config.client_side_validation && report_name.nil?
        fail ArgumentError, "Missing the required parameter 'report_name' when calling ReportSubscriptionsApi.get_subscription"
      end
      if @api_client.config.client_side_validation && report_name.to_s.length > 80
        fail ArgumentError, 'invalid value for "report_name" when calling ReportSubscriptionsApi.get_subscription, the character length must be smaller than or equal to 80.'
      end

      if @api_client.config.client_side_validation && report_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "report_name" when calling ReportSubscriptionsApi.get_subscription, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && report_name !~ Regexp.new(/[a-zA-Z0-9-_+]+/)
        fail ArgumentError, "invalid value for 'report_name' when calling ReportSubscriptionsApi.get_subscription, must conform to the pattern /[a-zA-Z0-9-_+]+/."
      end

      # resource path
      local_var_path = 'reporting/v3/report-subscriptions/{reportName}'.sub('{' + 'reportName' + '}', report_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2006Subscriptions')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportSubscriptionsApi#get_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
